
const APP_NAME = "usciter.app";
include "settings.tis";
include "drop-zone.tis";
include "live-reload.tis";

const content = $(frame#content);
const inspectorButton = $(button#inspector);

var filename = null;
const file_filter = "files *.htm,*.html,*.svg,*.zip,*.scapp|*.htm;*.html;*.svg;*.zip;*.scapp|"
   "HTML files only(*.htm,*.html)|*.htm;*.html|"
   "SVG files only(*.svg)|*.svg|"
   "SCAPP files only (*.zip,*.scapp)|*.zip;*.scapp|"
   "All Files (*.*)|*.*";
   
var debugIsActive = false; 

function loadFile(fn)
{
  view.trayIcon(#remove);
  liveReload.reset();

  filename = fn;
  content.load(fn);
  $(button#reload).state.disabled = false;
  inspectorButton.state.disabled  = false;
  if(debugIsActive)
    view.launchDebugView();
  var croot = content[0];
  var title = croot.$(head>title); 
  if(title) {
    var t =  String.printf("uSDTK: %s", title.text);
    view.windowCaption = t;
    if(var capEl = $(window-caption))
      capEl.text = t;
  }
  
  if (URL.parse(fn).name != "sys-info") {
    Setting.data.history.removeByValue({title: title.text, path: URL.toPath(fn)});
    Setting.data.history.unshift({title: title.text, path: URL.toPath(fn)});
    if (Setting.data.history.length > 5) { Setting.data.history.pop(); }
  }
}

event click $(button#open)
{
  var fn = view.selectFile(#open,file_filter);
  if( fn ) 
  {
    loadFile(fn);
  }
}

event click $(button#reload)
{
  liveReload.reset();
  if( filename ) {
    content.load(filename);
    if(debugIsActive)
      view.launchDebugView();
  }
}

event click $(button#open-in-view)
{
  var fn = view.selectFile(#open,file_filter);
  if( fn ) 
  {
    view.load(fn);
  }
}

event click $(button#help)
{
  var path = System.home("../doc/main.htm");
  if(!System.scanFiles(path))
    path = System.home("../../doc/main.htm");
  if(!System.scanFiles(path)) {
    view.msgbox(#alert, "docs not found, \nCopy the doc folder from sciter-sdk and paste it inside the SDKT folder.");
    return true;
  }

  view.window 
  {
    url: URL.fromPath(path),
    state: View.WINDOW_SHOWN,
    alignment:5,
    width: 1024,
    height: 800
  };
}

var pinned = 0;
event click $(button#pin) {
  if(pinned==0) { pinned = 1; view.windowTopmost = true; $(#pin).style#fill = "#fff"; }
  else          { pinned = 0; view.windowTopmost =false; $(#pin).style#fill = "#777"; }
}
event click $(button#home) {
  loadFile(self.url("sys-info.htm"));
}

DropZone.call(content,"*.htm;*.html;*.xhtml;*.svg"); 

event file-drop (evt) {
  loadFile(evt.data[0]);
  return true;
}

var liveReload = new LiveReload(function() {
  if( filename ) {
    content.load(filename);
    if(debugIsActive)
      view.launchDebugView();
  }
});

event click $(button#live-reload)
{
  if(this.value) {
    liveReload.start();
  } else {
    liveReload.stop();
  }
}

event change-detected {
  $(button#live-reload).state.visited = true;
}
event change-processed {
  $(button#live-reload).state.visited = false;
}


/*
function content.onExchange(evt)
{
   if( evt.type == Event.X_DRAG_ENTER && evt.draggingDataType == #file)
   {
     this.@#allow-drop = true;
     return true;
   }
   else if( evt.type == Event.X_DRAG_LEAVE )
   {
     this.@#allow-drop = undefined;
     return true;
   }
   else if( evt.type == Event.X_DRAG && evt.draggingDataType == #file)
   {
     return true;
   }
   else if( evt.type == Event.X_DROP && evt.draggingDataType == #file)
   {
     this.@#allow-drop = undefined;
     var fn;
     if(typeof evt.dragging == #array)
       fn = evt.dragging[0];
     else
       fn = evt.dragging;
     loadFile(fn);
     return true;
   }
}*/



event click $(button#inspector)
{
  if( var connectToInspector = view.connectToInspector ) {

    const SUFFIX = { Windows: ".exe", OSX: ".app" };

    var inspectorPath = System.home("inspector" + (SUFFIX[System.PLATFORM] || ""));
    // var inspectorPath = System.home("inspector.exe.lnk");
    if( !System.scanFiles(inspectorPath) ) {
      view.msgbox(#alert, "Cannot find " + inspectorPath);
      return;
    }
    Sciter.launch(inspectorPath);
    self.timer(300ms, function() { connectToInspector($(frame#content)) });
  }
}

function self.ready() {
  Setting.load();
}
